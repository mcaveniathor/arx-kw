var searchIndex = JSON.parse('{\
"arx_kw":{"doc":"ARX-KWcrates.io Docs.rs Rust Report Card dependency status…","i":[[0,"e","arx_kw","Module containing items related to the ARX-KW-8-2-4-E …",null,null],[3,"E","arx_kw::e","The ARX-8-2-4-E variant. Has a key length of 48 bytes and …",null,null],[11,"key_length","","The length in bytes of the secret key used by this …",0,[[]]],[11,"max_input_length","","Returns the maximum length in bytes for the input to …",0,[[]]],[0,"g","arx_kw","Module containing items related to the ARX-KW-8-2-4-G …",null,null],[3,"G","arx_kw::g","The ARX-8-2-4-G variant. Has a key length of 32 bytes and …",null,null],[11,"key_length","","The length of the secret key used by this variant of …",1,[[]]],[11,"max_input_length","","Returns the maximum length in bytes for the input to …",1,[[]]],[0,"ex","arx_kw","Module containing items related to the ARX-KW-8-2-4-EX …",null,null],[3,"EX","arx_kw::ex","A user-friendly implementation of ARX-KW-8-2-4-EX. Has a …",null,null],[11,"key_length","","The length in bytes of the secret key used by this …",2,[[]]],[5,"construct_nonce","","Concatenates an authentication tag to the EX prefix and …",null,[[["authtag",3]]]],[0,"gx","arx_kw","Module containing items related to the ARX-KW-8-2-4-GX …",null,null],[3,"GX","arx_kw::gx","The ARX-8-2-4-GX variant. Has a key length of 32 bytes …",null,null],[11,"key_length","","The length in bytes of the secret key used by this …",3,[[]]],[5,"construct_nonce","","Concatenates an authentication tag to the GX prefix …",null,[[["authtag",3]]]],[8,"ConstantTimeEq","arx_kw","An <code>Eq</code>-like trait that produces a <code>Choice</code> instead of a <code>bool</code>.",null,null],[10,"ct_eq","","Determine if two items are equal.",4,[[],["choice",3]]],[3,"Choice","","The <code>Choice</code> struct represents a choice for use in …",null,null],[4,"InvalidLengthError","","An error denoting that a value was of an invalid length. …",null,null],[13,"_Fixed","","Invalid length in a context expecting a fixed length.",5,null],[13,"UpTo","","Invalid length in a context which accepts a variable …",5,null],[4,"ArxKwError","","The error type used by this crate.",null,null],[13,"InvalidLength","","See [<code>InvalidLengthError</code>]",6,null],[13,"ChaChaError","","Occurs if a function using either ChaCha8 or XChaCha8 …",6,null],[13,"BadTags","","Returns if an authentication tag mismatch occurs during …",6,null],[3,"AuthTag","","The type used as the authentication tag (unencrypted data …",null,null],[12,"0","","",7,null],[8,"ArxKW","","Provides encryption and decryption capabilites",null,null],[16,"Key","","The type of data which is used as a key for the type that …",8,null],[10,"encrypt","","Encrypts the plaintext using ARX-KW and returns the …",8,[[],[["result",4],["arxkwerror",4]]]],[10,"decrypt","","Attempts to decrypt the ciphertext using ARX-KW and …",8,[[["authtag",3]],[["result",4],["vec",3],["arxkwerror",4]]]],[11,"encrypt_blob","","Encrypts the plaintext and returns a [<code>Vec<u8></code>] containing …",8,[[],[["result",4],["vec",3],["arxkwerror",4]]]],[11,"decrypt_blob","","Decrypts a blob containing an authentication tag followed …",8,[[],[["result",4],["vec",3],["arxkwerror",4]]]],[14,"assert_ct_eq","","Macro which provides an equivalent of [<code>assert_eq</code>] in …",null,null],[11,"from","arx_kw::e","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","arx_kw::g","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","arx_kw::ex","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","arx_kw::gx","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","arx_kw","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"bitand","","",9,[[["choice",3]],["choice",3]]],[11,"bitxor","","",9,[[["choice",3]],["choice",3]]],[11,"ct_eq","","",9,[[["choice",3]],["choice",3]]],[11,"bitor_assign","","",9,[[["choice",3]]]],[11,"not","","",9,[[],["choice",3]]],[11,"bitor","","",9,[[["choice",3]],["choice",3]]],[11,"bitxor_assign","","",9,[[["choice",3]]]],[11,"conditional_select","","",9,[[["choice",3],["choice",3]],["choice",3]]],[11,"bitand_assign","","",9,[[["choice",3]]]],[11,"fmt","","",9,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from","","",9,[[],["choice",3]]],[11,"clone","","",9,[[],["choice",3]]],[11,"encrypt","arx_kw::e","",0,[[],[["result",4],["arxkwerror",4]]]],[11,"decrypt","","",0,[[["authtag",3]],[["result",4],["vec",3],["arxkwerror",4]]]],[11,"encrypt","arx_kw::g","",1,[[],[["result",4],["arxkwerror",4]]]],[11,"decrypt","","",1,[[["authtag",3]],[["result",4],["vec",3],["arxkwerror",4]]]],[11,"encrypt","arx_kw::ex","",2,[[],[["result",4],["arxkwerror",4]]]],[11,"decrypt","","",2,[[["authtag",3]],[["result",4],["vec",3],["arxkwerror",4]]]],[11,"encrypt","arx_kw::gx","",3,[[],[["result",4],["arxkwerror",4]]]],[11,"decrypt","","",3,[[["authtag",3]],[["result",4],["vec",3],["arxkwerror",4]]]],[11,"as_ref","arx_kw","",7,[[]]],[11,"from","","",6,[[["invalidlengtherror",4]]]],[11,"clone","","",7,[[],["authtag",3]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"source","","",6,[[],[["option",4],["error",8]]]],[11,"ct_eq","","",7,[[],["choice",3]]],[11,"unwrap_u8","","Unwrap the <code>Choice</code> wrapper to reveal the underlying <code>u8</code>.",9,[[]]]],"p":[[3,"E"],[3,"G"],[3,"EX"],[3,"GX"],[8,"ConstantTimeEq"],[4,"InvalidLengthError"],[4,"ArxKwError"],[3,"AuthTag"],[8,"ArxKW"],[3,"Choice"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);