initSidebarItems({"enum":[["ArxKwError","The error type used by this crate."],["InvalidLengthError","An error denoting that a value was of an invalid length. Typically this will be used as a variant of [`ArxKwError`] rather than on its own."]],"macro":[["assert_ct_eq","Macro which provides an equivalent of [`assert_eq`] in constant time using the [`ConstantTimeEq`] trait. Accordingly, ConstantTimeEq must be in scope and implemented on the types of $x and $y for this to work. It is implemented for [`AuthTag`] and many primitives."]],"mod":[["e","Module containing items related to the ARX-KW-8-2-4-E variant"],["ex","Module containing items related to the ARX-KW-8-2-4-EX variant"],["g","Module containing items related to the ARX-KW-8-2-4-G variant"],["gx","Module containing items related to the ARX-KW-8-2-4-GX variant"]],"struct":[["AuthTag","The type used as the authentication tag (unencrypted data to be stored alongside encrypted keys)  This is the same for all variants at time of writing (a single, static 128 bits), making for a 50% storage overhead for a 256-bit key like those used for `ChaCha`"],["Choice","The `Choice` struct represents a choice for use in conditional assignment."]],"trait":[["ArxKW","Provides encryption and decryption capabilites"],["ConstantTimeEq","An `Eq`-like trait that produces a `Choice` instead of a `bool`."]]});